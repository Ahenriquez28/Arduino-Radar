#include <Servo.h>  // Include Servo library

// Define pins for the ultrasonic sensor
const int trigPin = 10;
const int echoPin = 11;

// Variables for measuring distance
long duration;
int distance;

const int servoPin = 12;
Servo myServo;  // Create a Servo object to control the motor

const int ledPin = 4;  // Pin for LED
const int buzzerPin = 5;  // Pin for Buzzer

void setup() {
  pinMode(trigPin, OUTPUT);  // Sets the trigPin as an Output
  pinMode(echoPin, INPUT);   // Sets the echoPin as an Input

  pinMode(ledPin, OUTPUT);  // Set ledPin as an OUTPUT
  pinMode(buzzerPin, OUTPUT);  // Set buzzerPin as an OUTPUT

  Serial.begin(9600);
  myServo.attach(servoPin);  // Defines on which pin the servo motor is attached
}

void loop() {
  // Rotate the servo motor from 15 to 165 degrees
  for (int i = 15; i <= 165; i++) {
    myServo.write(i);  // Set servo position
    delay(50);  // Increased delay for stability

    distance = calculateDistance();  // Measure distance at this angle
    handleAlerts();  // Check distance and handle alerts

    // Print the current angle and distance in one line
    Serial.print("Angle: ");
    Serial.print(i);
    Serial.print(", Distance: ");
    Serial.println(distance);  // Print distance and move to the next line
  }

  // Repeat the previous lines from 165 to 15 degrees
  for (int i = 165; i >= 15; i--) {
    myServo.write(i);
    delay(50);  // Increased delay for stability

    distance = calculateDistance(); // Measure distance at this angle
    handleAlerts();  // Check distance and handle alerts

    // Print the current angle and distance in one line
    Serial.print("Angle: ");
    Serial.print(i);
    Serial.print(", Distance: ");
    Serial.println(distance);  // Print distance and move to the next line
  }
}

// Function to read the sensor data and calculate the distance
int calculateDistance() {
  digitalWrite(trigPin, LOW);   // Set trig pin to low to ensure a clean pulse
  delayMicroseconds(2);         // Delay for 2 microseconds
  digitalWrite(trigPin, HIGH);  // Send a 10 microsecond pulse by setting trig pin to high
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);  // Set trig pin back to low

  // Measure the pulse width of the echo pin and calculate the distance value
  float distance = pulseIn(echoPin, HIGH) / 58.00;  // Formula: (340m/s * 1us) / 2
  return distance;
}

void handleAlerts() {
  // Activate LED and buzzer if an object is within 15 cm
  if (distance <= 15) {
    digitalWrite(ledPin, HIGH);  // Turn on LED
    tone(buzzerPin, 500);  // Turn on Buzzer with a 500 Hz tone
  } else {
    digitalWrite(ledPin, LOW);  // Turn off LED
    noTone(buzzerPin);  // Turn off Buzzer
  }
}

